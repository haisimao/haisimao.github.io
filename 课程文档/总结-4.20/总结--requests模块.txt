    url --网络API(应用程序编程接口)/网络数据接口.通过url网络数据接口通常会拿到两种数据格式(XML/JSON)其中一种.
    
    url中不能有中文,如果有需要处理成百分号编码,它以一个百分号（%）和该字符的ASCII编码所对应的2位十六进制数字去替换这些字符.
   from  urllib.parse import quote,unquote
   1)quote把中文转换为% 编码格式,
   2)unquote把%编码转换为指定编码格式'utf-8'
   3)浏览器有自动转换中文为百分号编码的功能

# requests详解
https://www.jianshu.com/p/12695f0740ab
https://blog.csdn.net/gyq1998/article/details/78583841
******************************************
requests :
    r=requests.get(url,params,**kwargs)
    获得的r是response对象
    参数: 
    1)url: 需要爬取的网站地址。
    2)params: 向url中传递的参数,比如在采集百度搜索结果时，我们wd参数（搜索词）和rn参数（搜素结果数量），url中的额外参数，字典或者字节流格式，可选--即以键值的方式向url链接添加参数(以?key1=value1&key2=value2的模式增加到url链接中)
    3)timeout: 用于设定超时时间， 单位为秒，当发起一个get请求时可以设置一个timeout时间， 如果在timeout时间内请求内容没有返回， 将产生一个timeout的异常。
     4)stream: 开关， 指是否对获取内容进行立即下载， 默认为True。
*****************************************
     r的属性:
     1)r.text:http响应内容的字符串形式，即返回的页面内容
     2)r.encoding : 从http header中猜测的相应内容编码方式.
     3)r.content : http响应内容的二进制形式
     4)r.status_code :http请求的返回状态，若为200则表示请求成功.
     5)r.apparent_encoding :从内容中分析出的响应内容编码方式（备选编码方式）
***************************************
     方法:以下的调用都会返回一个response对象
     1)r = requests.(post,put,patch,delete,head)是向url中(网页文件)的内容进行修改.
     2)r = requests.get("http://httpbin.org/get") #获取信息
     3)r = requests.post("http://httpbin.org/post") #创建，但是一般在使用的过程中，用来更新，创建，删除都是它
     4)r = requests.put("http://httpbin.org/put") #更新或创建..requests.patch和request.put类似。 
两者不同的是： 当我们用patch时仅需要提交需要修改的字段。 而用put时，必须将20个字段一起提交到url，未提交字段将会被删除。 
     5)r = requests.delete("http://httpbin.org/delete") #删除
     6)r = requests.head("http://httpbin.org/get") #获取header信息，和get差不多，只是不返回body数据

******************************************
r = requests.request():
       r = requests.request(method，url,**kwargs)--支持其他所有的方法 
        1)method: “GET”、”HEAD”、”POST”、”PUT”、”PATCH”等等
        2)url: 请求的网址
        3)**kwargs: 控制访问的参数
******************************************

requests库的异常 :
         我们可以利用r.raise_for_status() 语句去捕捉异常，该语句在方法内部判断r.status_code是否等于200，如果不等于，则抛出异常。
        
   try:
       r=requests.get(url,timeout=30)#请求超时时间为30秒
       r.raise_for_status()#如果状态不是200，则引发异常
       r.encoding=r.apparent_encoding #配置编码
       return r.text
  except:
       return "产生异常"
*******************************************

    类似 requests.get() 的调用，你都在做两件主要的事情。其一，你在构建一个 Request 对象， 该对象将被发送到某个服务器请求或查询一些资源。其二，一旦 requests 得到一个从服务器返回的响应就会产生一个 Response 对象。该响应对象包含服务器返回的所有信息，也包含你原来创建的 Request 对象。









    