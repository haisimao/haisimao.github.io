Subversion -SVN --集中式版本控制器系统 - 版本中央控制服务器

Git -分布式版本控制器 - 社会化编程

先建仓库 -- mkdir 文件夹
必须进入仓库文件夹操作
初始化文件夹git init (建了.git)
创建文件 在仓库内放入要进行版本管理的文件或文件夹
添加文件 git add 文件名 /git add .----现在暂时在暂存区
提交文件 git commit -m '提交说明'------目录树
身份验证 git config --global user.name 'xiaozhi'
         git config --global user.email ''

git status 查看暂存区
git log    查看所有的版本,日志
git reset --hard 版本号 回到某个版本,其他版本被取消 HEAD-> 被修改
git reflog 回到所有的历史版本,找回所有取消的版本回来 HEAD->被修改会原来的            第一个版本

撤销提交到缓存区的文件
git checkout 
修改文件,或则删除缓存文件夹的内容
git add .再提交
git commit -m '' 提交到本地仓库
git rm 文件名  删除文件

将本地的仓库与远端的另一个仓库同步(服务器已经有了一个仓库了,要在本地绑定一个仓库):
git clone url --从网上的服务器得到版本仓库 -会创建一个仓库在当前目录
进入仓库,然后对仓库进行操作
git push origin master 将本地仓库同步到云端-origin(项目默认名称)-master(主分支)
git pull 从服务器更新仓库

将本地的仓库与远端的另一个空仓库同步(本地已经有了一个仓库了,要在远端绑定一个仓库):
git remote add origin url  添加远端仓库 
git push -u  origin master  更新远端的仓库(第一次)
然后可以再更新本地仓库 
git push origin master  再更新远端仓库 
git pull 从服务器更新仓库

建立分支:
git branch 分支名  建立新分支
git checkout 分支名  对HEAD指向的分支进行修改
git branch    查看所有分支
git add .
git commit -m ''
git push origin 分支名  建立分支的远端(推送了新的分支)
git checkout master
git merge 分支名  将其他分支的合并到master,主要是对master进行修改更新
git push origin master

Git日常工作流程
git clone url
cd dir
git branch 分支名
git checkout 分支名
************************
git add .
git commit -m ''
git push origin 分支名
***********************
git checkout master
git merge 分支名
git push origin master




HEAD -> 指向第一个版本(相当于历史时间节点,在某个时间节点这个文件夹的状态,达到回溯的效果)